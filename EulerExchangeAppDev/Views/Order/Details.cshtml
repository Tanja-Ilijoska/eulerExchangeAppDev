@using EulerExchangeAppDev.Models;
@using EulerExchangeAppDev.Models.ViewModels;
@using EulerExchangeAppDev.Controllers;

@model OrderModel
@{
    ViewBag.Title = "View order";
}

<h2>View order</h2>


@for (int k = 0; k < Model.Categories.Count(); k++)
{
    var category = Model.Categories[k];
    <div style="font-size:1.5em; padding-top:1em">@category.Name</div>
        <div id="products" class="row list-group" style="margin-bottom:0;">
            <div style="display:none">
                @Html.EditorFor(model => model.Categories[k])
            </div>
            @for (int j = 0; j < Model.Jewelries.Where(x => x.CategoryJewelryId == category.Id).Count(); j++)
            {
                var item = Model.Jewelries.Where(x => x.CategoryJewelryId == category.Id).ToList()[j];

                <div style="display:none">
                    @Html.EditorFor(model => model.Jewelries[j])
                </div>
                <div class="item  col-xs-3 col-lg-3">
                    <div class="thumbnail">
                        <p class="group inner list-group-item-text" style="float:left; font-size:0.9em">
                            <b>@Html.LabelFor(model => item.Id):</b>
                            <label id="carat-@item.Id">@item.Id</label><br />
                            <b>@Html.LabelFor(model => item.Carat):</b>
                            <label id="carat-@item.Id">@item.Carat</label><br />
                            <b>@Html.LabelFor(model => item.Price):</b>
                            <label id="price-@item.Id">@item.Price</label><br />
                            <b>@Html.LabelFor(model => item.Weight):</b>
                            <label id="weight-@item.Id">@item.Weight</label><br />
                            <b>@Html.LabelFor(model => item.Quantity):</b>
                            <label id="weight-@item.Id">@item.Quantity</label><br />
                        </p>
                        @if (item.JewelryItemsImageURL != null && item.JewelryItemsImageURL.Count > 0)
                        {
                            <div class="gallery">
                                <a href="@Url.Action("GetImage", "JewelryItems", item.JewelryItemsImageURL.First())" productDetails="">
                                    <img src='@Url.Action("GetImage", "JewelryItems", item.JewelryItemsImageURL.First())' class="group list-group-image" style="height:80px; width:auto" /><br />
                                </a>
                                @for (int i = 1; i < item.JewelryItemsImageURL.Count; i++)
                                {
                                    <a href="@Url.Action("GetImage", "JewelryItems", item.JewelryItemsImageURL.ElementAt(i))" class="group list-group-image" style="height:80px; width:auto"></a>
                                }

                            </div>
                        }
                        else
                        {
                            <img src="~/DataImages/noimage.png" style="height:80px; width:auto" />
                                <br />
                        }
                    </div>
                </div>
            }
        </div>
        <div style="text-align:right"><b>Weight:</b>@Model.Weight[@category.Name] <b>Price:</b>@Model.Price[@category.Name] <b>Quantity:</b>@Model.Quantity[@category.Name]</div>
}

<hr />
<div style="font-size:1.2em; padding-bottom:1em">
    <div style="text-align:left; float:left"><b>Total</b></div>
    <div style="text-align:right;"><b>Weight:</b>@Model.Weight["Total"] <b>Price:</b>@Model.Price["Total"] <b>Quantity:</b>@Model.Quantity["Total"]</div>

</div>

<link rel="stylesheet" href="~/Scripts/MagnificPopup/magnific-popup.css">
<script src="~/Scripts/MagnificPopup/jquery.magnific-popup.js"></script>
<script>

    $('.gallery').each(function () { // the containers for all your galleries
        $(this).magnificPopup({
            delegate: 'a', // the selector for gallery item
            type: 'image',
            tLoading: 'Loading image #%curr%...',
            image: {
                verticalFit: true
            },
            gallery: {
                enabled: true,
                navigateByImgClick: true,
                preload: [0, 1]
            },
            image: {
                tError: '<a href="%url%">The image #%curr%</a> could not be loaded.',
                titleSrc: function (item) {
                    return "ProductDetails: " + item.el.attr('productDetails');
                },
                markup: '<div class="mfp-figure">' +
                            '<div style="color:white">TEXT</div>' +
                            '<div class="mfp-close"></div>' +
                                '<div class="mfp-img"></div>' +
                            '<div class="mfp-bottom-bar">' +
                                '<div class="mfp-title"></div>' +
                                '<div class="mfp-counter"></div>' +
                             '</div>' +
                        '</div>',
                verticalFit: true
            },
            callbacks: {
                resize: changeImgSize,
                imageLoadComplete: changeImgSize,
                change: changeImgSize
            }
        });
    });


    function changeImgSize() {
        var img = this.content.find('img');
        img.css('height', '500');
        img.css('width', '500');
    }
</script>
